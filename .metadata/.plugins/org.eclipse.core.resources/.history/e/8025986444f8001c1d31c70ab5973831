package com.kh.pet.model.dao;

import static com.kh.common.JDBCTemplate.close;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import com.kh.common.model.vo.Attachment;
import com.kh.pet.model.vo.Animal;
import com.kh.pet.model.vo.Diary;

public class PetDao {
	private Properties prop = new Properties();
	
	public PetDao() {
		
		String file = PetDao.class.getResource("/sql/pet/pet-mapper.xml").getPath();
		
		try {
			prop.loadFromXML(new FileInputStream(file));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public int insert1Pet(Connection conn, Animal p) {
		int result = 0;
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("insert1Pet");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, p.getPetName());
			pstmt.setString(2, p.getPetInputNo());
			pstmt.setString(3, p.getPetKind());
			pstmt.setString(4, p.getPetBreed());
			pstmt.setString(5, p.getPetBirth());
			pstmt.setString(6, p.getPetNeutral());			
			pstmt.setString(7, p.getPetOwner());			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		
		return result;
	}
	public int insert2Pet(Connection conn, Attachment at) {
		int result = 1;
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("insert2Pet");
		
		try {
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, at.getOriginName());
				pstmt.setString(2, at.getChangeName());
				pstmt.setString(3, at.getFilePath());
				pstmt.setInt(4, at.getFileLevel());
				
				// 실행
				result *= pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		return result;
	}
	
	
	public ArrayList<Animal> selectPetList(Connection conn, String loginUser){
		ArrayList<Animal> list = new ArrayList();
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectPetList");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, loginUser);
			
			rset = pstmt.executeQuery();
			
			while(rset.next()) {
				
				Animal a = new Animal();
				// 게시글번호, 제목, 조회수, 저장경로, 바뀐이름
				a.setPetNo(rset.getInt("PET_NO"));
				a.setTitleImg(rset.getString("TITLEIMG"));
				a.setPetName(rset.getString("PET_NAME"));
				
				list.add(a);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		return list;

	}
	
	public int deletePet(Connection conn, String petName, String memberPwd) {
		int result = 0;
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("deletePet");
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, petName);
			pstmt.setString(2, memberPwd);
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		
		
		return result;
	}
	public Animal selectAnimal(Connection conn, int pno) {
		ResultSet rset = null;
		PreparedStatement pstmt = null;
		Animal a =null;
		
		String sql = prop.getProperty("selectAnimal");
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, pno);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				a = new Animal();
				a.setPetNo(rset.getInt("PET_NO"));
				a.setPetName(rset.getString("PET_NAME"));
				a.setPetInputNo(rset.getString("PET_INPUTNO"));
				a.setPetKind(rset.getString("PET_KIND"));
				a.setPetBreed(rset.getString("PET_BREED"));
				a.setPetNeutral(rset.getString("PET_NEUTRAL"));
				a.setCreateDate(rset.getDate("CREATE_DATE"));
				a.setStatus(rset.getString("STATUS"));
				a.setPetOwner(rset.getString("PET_OWNER"));
				a.setCount(rset.getInt("COUNT"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return a;
	}
	
	public Diary selectDate(Connection conn, String selectDate, int pno) {
		ResultSet rset = null;
		PreparedStatement pstmt = null;
		Diary d =null;
		
		String sql = prop.getProperty("selectDate");
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, selectDate);
			pstmt.setInt(2, pno);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				d = new Diary();
				d.setPetWeight(rset.getInt("PET_WEIGHT"));
				d.setPetWalk(rset.getInt("PET_WALK"));
				d.setPetFood(rset.getInt("PET_FOOD"));
				d.setPetPee(rset.getString("PET_PEE"));
				d.setPetRecord(rset.getString("PET_RECORD"));
				d.setWriteDate(rset.getString("WRITE_DATE"));
				d.setPetNo(rset.getInt("PET_NO"));
				
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return d;
	}
	public int insertDiary(Connection conn, Diary d) {
		int result = 0;
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("insertDiary");
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, d.getPetWeight());
			pstmt.setInt(2, d.getPetWalk());
			pstmt.setInt(3, d.getPetFood());
			pstmt.setString(4, d.getPetPee());
			pstmt.setString(5, d.getPetRecord());
			pstmt.setString(6, d.getWriteDate());
			pstmt.setInt(7, d.getPetNo());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		
		
		return result;
	}
	
	
	public Diary updatelistDiary(Connection conn, int dno) {
		ResultSet rset = null;
		PreparedStatement pstmt = null;
		Diary d = null;
		
		String sql = prop.getProperty("updatelistDiary");
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, dno);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				d = new Diary();
				d.setDiaryNo(rset.getInt("DIARY_NO"));
				d.setPetWeight(rset.getInt("PET_WEIGHT"));
				d.setPetWalk(rset.getInt("PET_WALK"));
				d.setPetFood(rset.getInt("PET_FOOD"));
				d.setPetPee(rset.getString("PET_PEE"));
				d.setPetRecord(rset.getString("PET_RECORD"));
				d.setWriteDate(rset.getString("WRITE_DATE"));
				d.setStatus(rset.getString("STATUS"));
				d.setPetNo(rset.getInt("PET_NO"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		
		return d;
	}

}
